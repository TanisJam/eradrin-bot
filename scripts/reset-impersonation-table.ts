import { Sequelize } from 'sequelize';
import config from '../src/config';
import ImpersonationCharacter from '../src/database/models/ImpersonationCharacter';
import { logger } from '../src/utils/logger';

/**
 * Script para recrear la tabla ImpersonationCharacters
 * ADVERTENCIA: Este script eliminar√° la tabla y todos sus datos
 */
async function resetImpersonationTable() {
  try {
    logger.info('üîÑ Iniciando recreaci√≥n de tabla ImpersonationCharacters...');
    
    // Primero nos conectamos a la base de datos
    const sequelize = new Sequelize({
      dialect: 'sqlite',
      storage: config.DATABASE_PATH,
      logging: false
    });
    
    await sequelize.authenticate();
    logger.info('‚úÖ Conexi√≥n a la base de datos establecida.');
    
    // Eliminamos la tabla directamente usando una consulta SQL
    logger.info('üóëÔ∏è Eliminando tabla ImpersonationCharacters...');
    await sequelize.query('DROP TABLE IF EXISTS "ImpersonationCharacters"');
    logger.info('‚úÖ Tabla eliminada correctamente.');
    
    // Volvemos a inicializar la base de datos para recrear la tabla
    logger.info('üîÑ Recreando tabla con el modelo actualizado...');
    
    // Forzamos la sincronizaci√≥n de solo el modelo ImpersonationCharacter
    await ImpersonationCharacter.sync({ force: true });
    
    logger.info('‚úÖ Tabla ImpersonationCharacters recreada correctamente!');
    logger.info('‚ÑπÔ∏è La tabla ahora est√° vac√≠a. Los usuarios tendr√°n que volver a crear sus personajes.');
    
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Error al recrear la tabla:', error);
    process.exit(1);
  }
}

// Pedimos confirmaci√≥n antes de ejecutar
logger.warn('‚ö†Ô∏è ADVERTENCIA: Este script eliminar√° todos los personajes de impersonaci√≥n existentes.');
logger.warn('‚ö†Ô∏è Esta acci√≥n no se puede deshacer.');
logger.warn('‚ö†Ô∏è Presiona Ctrl+C para cancelar o espera 5 segundos para continuar...');

setTimeout(resetImpersonationTable, 5000); 