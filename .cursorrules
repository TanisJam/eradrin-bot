# Eradrin Bot Coding Standards

## General
- **Language**: Use Spanish for all messages.
- **Language**: Use English for all comments.
- **Style**: Use a modern, clean, and readable code style.
- **Documentation**: Use JSDoc for all public interfaces, classes, and methods.
- **Error Handling**: Use try/catch blocks for all async operations.
- **Logging**: Use the logger utility for all logging with appropriate levels.
- **User Feedback**: Provide user-friendly error messages in Discord responses.
- **Package Manager**: Use pnpm for package management.
- **Database**: Use SQLite for the database.
- **Database Migrations**: Use sequelize-cli for database migrations.
- **Database Models**: Use sequelize models for the database.
- **Database Operations**: Use sequelize operations for the database.
- **Database Queries**: Use sequelize queries for the database.
- **Database Transactions**: Use sequelize transactions for the database.

## Naming Conventions
- **Variables/Constants**: Use camelCase for variables (e.g., `lastPingUser`) and UPPER_CASE for global constants (e.g., `TOKEN`)
- **Classes/Interfaces**: Use PascalCase (e.g., `User`, `Command`, `PingHistory`)
- **Files**: Use kebab-case for utility files (e.g., `format-text.ts`, `discord-utils.ts`) and PascalCase for model files (e.g., `User.ts`, `Character.ts`)
- **Folders**: Use lowercase with hyphens if needed (e.g., `src/`, `node_modules/`)
- **Commands**: Use lowercase for command names (e.g., `ping`, `roll`, `help`)
- **Database Tables**: Use PascalCase, matching the model name in singular form

## Project Structure
- **src/** - Main source code
  - **src/commands/** - Implementation of all Discord commands
  - **src/services/** - Services and business logic
  - **src/database/** - Database configuration and operations
    - **src/database/models/** - Sequelize models for the database
  - **src/utils/** - Utilities and helper functions
  - **src/types/** - TypeScript interfaces and types
  - **src/constants/** - Constants and fixed values
  - **src/bot.ts** - Entry point and Discord client configuration
  - **src/config.ts** - Centralized configuration and environment variable management
  - **src/deploy-commands.ts** - Script to register commands in Discord
  - **src/ai-model.ts** - Configuration and integration with generative AI
- **scripts/** - Scripts for administration and processing tasks
- **dist/** - Compiled code (generated by TypeScript)
- **knowledge/** - Knowledge base for RAG functionalities
- **data/** - Data storage and auxiliary files

## TypeScript Usage
- **Strict Mode**: Always enabled (`strict: true` in tsconfig.json)
- **Interfaces**: Define interfaces for all models, DTOs, and components
- **Type Declarations**: Use explicit type annotations for function parameters and return types
- **Declaration Files**: Declare module augmentations in the relevant files (e.g., extending discord.js Client)
- **Optionals**: Use the optional parameter syntax (`?`) for non-required properties
- **JSDoc**: Include JSDoc comments for all public interfaces, classes, and methods
- **Type Guards**: Use type guards when narrowing union types

## Syntax and Formatting
- **Indentation**: 2 spaces
- **Semicolons**: Required at the end of statements
- **Quotes**: Single quotes for strings by default
- **Trailing Commas**: Use trailing commas in multiline object/array literals
- **Line Length**: Keep lines under 100 characters where possible
- **Braces**: Always use braces for control structures (if, while, etc.)
- **Arrow Functions**: Prefer arrow functions for callbacks and anonymous functions
- **Async/Await**: Use async/await instead of raw Promises where appropriate
- **Comments**: Use JSDoc for documentation and inline comments for complex logic

## Error Handling and Validation
- **Structured Error Handling**: Use try/catch blocks for all async operations
- **Logging**: Use the logger utility for all logging with appropriate levels
- **User Feedback**: Provide user-friendly error messages in Discord responses
- **Input Validation**: Validate all user inputs before processing
- **Database Operations**: Wrap all database operations in try/catch blocks
- **Graceful Degradation**: Handle service unavailability elegantly
- **Process Errors**: Catch unhandled rejections at the process level

## UI and Styling
- **Discord Embeds**: Use Discord embeds for rich content presentation
- **Emojis**: Use relevant emojis to enhance user experience
- **Consistency**: Maintain consistent styling across similar command responses
- **Internationalization**: Use Spanish for user-facing messages
- **Formatting**: Use markdown for text formatting in Discord messages
- **Ephemeral Messages**: Use ephemeral messages for sensitive or personal information

## Key Conventions
- **Project Structure**: Follow the layered architecture (commands, services, database, utils)
- **Command Pattern**: All commands implement the Command interface
- **Dependency Injection**: Pass dependencies through parameters rather than importing directly
- **Service Layer**: Keep business logic in service classes
- **Database Models**: Use Sequelize with TypeScript interfaces
- **Environment Variables**: Access through central config module
- **Logging**: Use the centralized logger module for all logging
- **Testing**: Test files should be located near the files they test 